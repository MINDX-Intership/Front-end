import React, { useState, useEffect, useMemo } from 'react'; // Th√™m useMemo
import './AdminTimeline.css';
import {
  Box,
  Typography,
  Button,
  Tabs,
  Tab,
  Paper,
  Grid,
  Divider,
  List, // Th√™m List, ListItem
  ListItem,
  ListItemText,
  ListItemIcon,
  Chip // Th√™m Chip cho tr·∫°ng th√°i
} from '@mui/material';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import PlayCircleIcon from '@mui/icons-material/PlayCircle';
import AccessTimeIcon from '@mui/icons-material/AccessTime'; // Icon cho tr·∫°ng th√°i "NOT_STARTED"
import HourglassEmptyIcon from '@mui/icons-material/HourglassEmpty'; // Icon cho tr·∫°ng th√°i "IN_PROGRESS"
import HighlightOffIcon from '@mui/icons-material/HighlightOff'; // Icon cho tr·∫°ng th√°i "OVERDUE"
import DoneAllIcon from '@mui/icons-material/DoneAll'; // Icon cho tr·∫°ng th√°i "COMPLETED"


const AdminTimeline = ({ authToken }) => {
  const [tab, setTab] = useState(0);
  const [timelineTasks, setTimelineTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const startDate = "15/01/2024"; // ƒê√¢y l√† c√°c gi√° tr·ªã tƒ©nh, b·∫°n c√≥ th·ªÉ mu·ªën t√≠nh to√°n ƒë·ªông
  const endDate = "25/02/2024";
  const ganttDates = ["15/01", "22/01", "29/01", "05/02", "12/02", "19/02", "25/02"];

  useEffect(() => {
    const fetchTimelineTasks = async () => {
      setLoading(true);
      setError(null);
      try {
        if (!authToken) {
          setError('Authentication token not found. Please log in.');
          setLoading(false);
          return;
        }

        // CH·∫ÆC CH·∫ÆN R·∫∞NG URL N√ÄY L√Ä ƒê·∫¶Y ƒê·ª¶ V√Ä CH√çNH X√ÅC NH∆Ø POSTMAN C·ª¶A B·∫†N
        const response = await fetch('http://localhost:3000/api/admin/timeline-tasks', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`
          }
        });

        if (!response.ok) {
          const errorData = await response.json(); // C·ªë g·∫Øng parse JSON ngay c·∫£ khi l·ªói
          throw new Error(errorData.message || `Failed to fetch timeline tasks: ${response.status}`);
        }

        const data = await response.json();
        setTimelineTasks(data.data);
      } catch (err) {
        console.error("Error fetching timeline tasks:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchTimelineTasks();
  }, [authToken]);

  // T√≠nh to√°n s·ªë li·ªáu th·ªëng k√™ cho tab ph√¢n t√≠ch
  const totalTasks = timelineTasks.length;
  const completedTasks = timelineTasks.filter(task => task.status === 'COMPLETED').length;
  const inProgressTasks = timelineTasks.filter(task => task.status === 'IN_PROGRESS').length;
  const averageProgress = totalTasks > 0 ? ((completedTasks / totalTasks) * 100).toFixed(2) : 0;

  // S·∫Øp x·∫øp c√°c nhi·ªám v·ª• theo ng√†y t·∫°o m·ªõi nh·∫•t (ho·∫∑c ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c n·∫øu c√≥)
  const sortedTasks = useMemo(() => {
    return [...timelineTasks].sort((a, b) => {
      // Gi·∫£ s·ª≠ c√≥ thu·ªôc t√≠nh `createdAt` l√† chu·ªói ng√†y ISO 8601
      // B·∫°n c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªÉ s·∫Øp x·∫øp theo ng√†y b·∫Øt ƒë·∫ßu (startDate) ho·∫∑c ng√†y k·∫øt th√∫c (endDate) n·∫øu ch√∫ng c√≥ s·∫µn
      const dateA = new Date(a.createdAt);
      const dateB = new Date(b.createdAt);
      return dateB.getTime() - dateA.getTime(); // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
    });
  }, [timelineTasks]);

  // H√†m ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y
  const formatDate = (isoString) => {
    if (!isoString) return 'N/A';
    const date = new Date(isoString);
    return date.toLocaleDateString('vi-VN', { year: 'numeric', month: '2-digit', day: '2-digit' });
  };

  // H√†m ƒë·ªÉ l·∫•y icon v√† m√†u cho tr·∫°ng th√°i
  const getStatusDisplay = (status) => {
    let icon = null;
    let color = '';
    let label = '';

    switch (status) {
      case 'COMPLETED':
        icon = <DoneAllIcon fontSize="small" />;
        color = 'success';
        label = 'Ho√†n th√†nh';
        break;
      case 'IN_PROGRESS':
        icon = <HourglassEmptyIcon fontSize="small" />;
        color = 'info';
        label = 'ƒêang th·ª±c hi·ªán';
        break;
      case 'NOTSTARTED':
        icon = <AccessTimeIcon fontSize="small" />;
        color = 'default'; // Ho·∫∑c 'secondary'
        label = 'Ch∆∞a b·∫Øt ƒë·∫ßu';
        break;
      case 'OVERDUE':
        icon = <HighlightOffIcon fontSize="small" />;
        color = 'error';
        label = 'Qu√° h·∫°n';
        break;
      default:
        icon = null;
        color = 'default';
        label = status;
    }
    return <Chip label={label} icon={icon} color={color} size="small" />;
  };


  return (
    <Box className="admin-timeline-root">
      <Box className="tab-container">
        <Tabs
          value={tab}
          onChange={(_, v) => setTab(v)}
          centered
          TabIndicatorProps={{ style: { display: 'none' } }}
          className="simple-tabs"
        >
          <Tab
            label="Xem Timeline"
            className={tab === 0 ? 'tab-selected' : ''}
          />
          <Tab
            label="Ph√¢n t√≠ch Timeline"
            className={tab === 1 ? 'tab-selected' : ''}
          />
        </Tabs>
      </Box>

      {tab === 0 && (
        <Box className="cards-wrapper">
          <Paper elevation={3} className="custom-card gantt-paper">
            <Box className="gantt-title-row">
              <Typography className="card-title">Bi·ªÉu ƒê·ªì Timeline Gantt</Typography>
              <Box className="gantt-date-row">
                <Typography className="gantt-date">{startDate} - {endDate}</Typography>
              </Box>
            </Box>
            <Divider className="divider" />
            <Box className="gantt-dates">
              {ganttDates.map(date => (
                <Box key={date} className="gantt-date-label">{date}</Box>
              ))}
            </Box>
            {loading && <Typography>ƒêang t·∫£i nhi·ªám v·ª• timeline...</Typography>}
            {error && <Typography color="error">L·ªói: {error}</Typography>}
            {!loading && !error && timelineTasks.length === 0 ? (
              <Box className="empty-state gantt-empty">
                <div className="empty-state-icon">üìÖ</div>
                <div className="empty-state-title">Ch∆∞a c√≥ nhi·ªám v·ª• n√†o</div>
                <Typography className="empty-state-caption">
                  Nh·∫•n "T·∫°o nhi·ªám v·ª• m·ªõi" ƒë·ªÉ b·∫Øt ƒë·∫ßu
                </Typography>
              </Box>
            ) : (
              <Box className="gantt-content">
                {/* ƒê√¢y l√† n∆°i b·∫°n s·∫Ω hi·ªÉn th·ªã bi·ªÉu ƒë·ªì Gantt th·ª±c t·∫ø ho·∫∑c danh s√°ch nhi·ªám v·ª• ƒë√£ s·∫Øp x·∫øp */}
                <Typography variant="h6" sx={{ mb: 2 }}>C√°c nhi·ªám v·ª• ƒë√£ t·∫£i (S·∫Øp x·∫øp theo ng√†y t·∫°o m·ªõi nh·∫•t):</Typography>
                <List dense>
                  {sortedTasks.map(task => (
                    <ListItem key={task._id} divider>
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
                            <Typography variant="body1" fontWeight="bold">
                              {task.title}
                            </Typography>
                            {getStatusDisplay(task.status)}
                          </Box>
                        }
                        secondary={
                          <>
                            <Typography variant="body2" color="text.secondary">
                              M√¥ t·∫£: {task.description}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              ∆Øu ti√™n: {task.priority}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              Ng√†y t·∫°o: {formatDate(task.createdAt)}
                            </Typography>
                            {task.sprint && (
                                <Typography variant="body2" color="text.secondary">
                                    Sprint ID: {task.sprint}
                                </Typography>
                            )}
                             {task.departId && (
                                <Typography variant="body2" color="text.secondary">
                                    Ph√≤ng ban ID: {task.departId}
                                </Typography>
                            )}
                          </>
                        }
                      />
                    </ListItem>
                  ))}
                </List>
              </Box>
            )}
          </Paper>

          <Paper elevation={3} className="custom-card calendar-paper">
            <Box className="calendar-title-row">
              <Typography className="card-title">Bi·ªÉu ƒê·ªì Timeline L·ªãch</Typography>
              <Button size="small" className="calendar-btn">Xem theo tu·∫ßn</Button>
            </Box>
            <Divider className="divider" />
            {loading && <Typography>ƒêang t·∫£i nhi·ªám v·ª• l·ªãch...</Typography>}
            {error && <Typography color="error">L·ªói: {error}</Typography>}
            {!loading && !error && timelineTasks.length === 0 ? (
              <Box className="empty-state calendar-empty">
                <div className="empty-state-icon">‚è∞</div>
                <div className="empty-state-title">Timeline tr·ªëng</div>
                <Typography className="empty-state-caption">
                  T·∫°o nhi·ªám v·ª• ƒë·ªÉ xem l·ªãch timeline
                </Typography>
              </Box>
            ) : (
              <Box className="calendar-content">
                <Typography variant="h6" sx={{ mb: 2 }}>Ch·∫ø ƒë·ªô xem l·ªãch cho nhi·ªám v·ª•:</Typography>
                <List dense>
                  {sortedTasks.map(task => (
                    <ListItem key={task._id} divider>
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
                            <Typography variant="body1" fontWeight="bold">
                              {task.title}
                            </Typography>
                            {getStatusDisplay(task.status)}
                          </Box>
                        }
                        secondary={
                          <>
                            <Typography variant="body2" color="text.secondary">
                              Ng√†y t·∫°o: {formatDate(task.createdAt)}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              M√¥ t·∫£: {task.description}
                            </Typography>
                          </>
                        }
                      />
                    </ListItem>
                  ))}
                </List>
              </Box>
            )}
          </Paper>
        </Box>
      )}

      {tab === 1 && (
        <Paper elevation={3} className="custom-card analysis-paper">
          <Grid container spacing={3} justifyContent="center" alignItems="center">
            <Grid item xs={6} sm={3}>
              <Box className="analysis-stat-box">
                <Typography className="stat-title">T·ªïng nhi·ªám v·ª•</Typography>
                <Typography className="stat-value">{totalTasks}</Typography>
              </Box>
            </Grid>
            <Grid item xs={6} sm={3}>
              <Box className="analysis-stat-box">
                <Typography className="stat-title">Ho√†n th√†nh</Typography>
                <Typography className="stat-value">
                  {completedTasks} <CheckCircleIcon color="success" />
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={6} sm={3}>
              <Box className="analysis-stat-box">
                <Typography className="stat-title">ƒêang th·ª±c hi·ªán</Typography>
                <Typography className="stat-value">
                  {inProgressTasks} <PlayCircleIcon color="info" />
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={6} sm={3}>
              <Box className="analysis-stat-box">
                <Typography className="stat-title">Ti·∫øn ƒë·ªô trung b√¨nh</Typography>
                <Typography className="stat-value">{averageProgress}%</Typography>
              </Box>
            </Grid>
          </Grid>
          {loading && <Typography>ƒêang t√≠nh to√°n d·ªØ li·ªáu ph√¢n t√≠ch...</Typography>}
          {error && <Typography color="error">L·ªói: {error}</Typography>}
          {!loading && !error && totalTasks === 0 ? (
            <Box className="empty-state analysis-empty">
              <div className="empty-state-icon">üìä</div>
              <div className="empty-state-title">Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch</div>
              <Typography className="empty-state-caption">
                T·∫°o nhi·ªám v·ª• ƒë·ªÉ xem bi·ªÉu ƒë·ªì ph√¢n t√≠ch
              </Typography>
            </Box>
          ) : (
            <Box className="analysis-content">
              <Typography variant="h6">D·ªØ li·ªáu ph√¢n t√≠ch:</Typography>
              <p>T·ªïng nhi·ªám v·ª•: {totalTasks}</p>
              <p>Ho√†n th√†nh: {completedTasks}</p>
              <p>ƒêang th·ª±c hi·ªán: {inProgressTasks}</p>
              <p>Ti·∫øn ƒë·ªô trung b√¨nh: {averageProgress}%</p>
              {/* B·∫°n c√≥ th·ªÉ th√™m c√°c bi·ªÉu ƒë·ªì ho·∫∑c th√¥ng tin chi ti·∫øt kh√°c ·ªü ƒë√¢y */}
            </Box>
          )}
        </Paper>
      )}
    </Box>
  );
};

export default AdminTimeline;